using SourceCodeGenerator.CodeGenerator;
using System;
using System.IO;
using System.Linq;
using System.Text;

namespace SourceCodeGenerator.CodeTemplates
{
    public class DetailsDataTransferObject
    {
        private ModelInfo _modelInfo = new ModelInfo();
        private Type _model;
        private string _codefolder;
        private CodeGeneratorEngine _engine;
        private string _category;
        private string _properties;

        public DetailsDataTransferObject(CodeGeneratorEngine engine, bool BackupOriginal = true)
        {
            _engine = engine;
            _modelInfo = _engine.ModelInfo;
            _model = _engine.Model;
            _codefolder = @$"Shared\Shared.DTOs\";
            string fileName = @$"{_model.Name}DetailsDto.cs";
            _category = string.IsNullOrEmpty(_modelInfo.Category) ? string.Empty : $@".{_modelInfo.Category}";
            _properties = _engine.GetProperties(ExcludeAppModelsIds: true); // Fix here - could we have a recursive engine reload we might need to make sure its not overriding the original instance

            string rootPath = EngineFunctions.GetApplicationPath();
            string codePath = @$"{rootPath}{_codefolder}" + (string.IsNullOrEmpty(_modelInfo.Category) ? @$"\" : @$"\{_modelInfo.Category}\");
            Directory.CreateDirectory(codePath);
            string filePath = codePath + fileName;
            string code = GenerateCode();
            if (BackupOriginal)
            {
                string[] files = Directory.GetFiles(codePath, fileName.Replace(".cs", "*"));
                int totalFiles = files.Count();
                string newFilePath = filePath.Replace(".cs", "_" + totalFiles.ToString() + ".cs");
                if (totalFiles > 0)
                {
                    while (File.Exists(newFilePath))
                    {
                        totalFiles += 1;
                        newFilePath = filePath.Replace(".cs", "_" + totalFiles.ToString() + ".cs");
                    }

                    if(File.Exists(filePath))
                        File.Copy(filePath, newFilePath);
                }
            }

            File.WriteAllText(filePath, code);
        }

        private string GenerateCode()
        {
            string category = string.IsNullOrEmpty(_modelInfo.Category) ? string.Empty : $@".{_modelInfo.Category}";

            string iCode = @$"// Autogenerated by SourceCodeGenerator

using System;
using System.Collections.Generic;

namespace {_engine.AppName}.Shared.DTOs{_category}
{{
    public class {_model.Name}DetailsDto : IDto
    {{
{_properties}
    }}
}}";
            return iCode;
        }
    }
}