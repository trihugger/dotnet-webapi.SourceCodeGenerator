using SourceCodeGenerator.CodeGenerator;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SourceCodeGenerator.CodeTemplates
{
    public class Service
    {
        private ModelInfo _modelInfo = new ModelInfo();
        private Type _model;
        private string _codefolder;
        private CodeGeneratorEngine _engine;
        private string _category;
        private string _eagerloadingCode;
        private string _appmodelExistsCode;
        private string _propertyLine;
        private string _detailsMethod;

        public Service(CodeGeneratorEngine engine, bool BackupOriginal = true)
        {
            _engine = engine;
            _modelInfo = _engine.ModelInfo;
            _model = _engine.Model;
            _codefolder = @$"Core\Application\Services\";
            string fileName = @$"{_model.Name}Service.cs";
            _category = string.IsNullOrEmpty(_modelInfo.Category) ? string.Empty : $@".{_modelInfo.Category}";
            _eagerloadingCode = GenerateEagerLoading();
            _appmodelExistsCode = GenerateAppModelExists();
            _propertyLine = _engine.GetInLineProperties(IncludeType: false, ExcludeAppModels: true, ExcludeCollections: true, IsLineARequest: true);
            _detailsMethod = GenerateDetailsMethod();

            string rootPath = EngineFunctions.GetApplicationPath();
            string codePath = @$"{rootPath}{_codefolder}" + (string.IsNullOrEmpty(_modelInfo.Category) ? @$"\" : @$"\{_modelInfo.Category}\");
            Directory.CreateDirectory(codePath);
            string filePath = codePath + fileName;
            string code = GenerateCode();
            if (BackupOriginal) EngineFunctions.BackupFile(filePath);
            File.WriteAllText(filePath, code);
        }

        private string GenerateCode()
        {
            string iCode = @$"// Autogenerated by SourceCodeGenerator

using {_engine.AppName}.Application.Abstractions.Repositories;
using {_engine.AppName}.Application.Abstractions.Services{_category};
using DN.WebApi.Application.Abstractions.Services.General;
using {_engine.AppName}.Application.Exceptions;
using DN.WebApi.Application.Specifications;
using {_engine.AppName}.Application.Wrapper;
using {_engine.AppName}.Domain.Entities{_category};
using DN.WebApi.Domain.Enums;
using {_engine.AppName}.Shared.DTOs{_category};
using Mapster;
using Microsoft.Extensions.Localization;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace {_engine.AppName}.Application.Services{_category}
{{
    public class {_model.Name}Service : I{_model.Name}Service
    {{
        private readonly IStringLocalizer<{_model.Name}Service> _localizer;
        private readonly IFileStorageService _file;
        private readonly IRepositoryAsync _repository;

        public {_model.Name}Service(IRepositoryAsync repository, IStringLocalizer<{_model.Name}Service> localizer, IFileStorageService file)
        {{
            _repository = repository;
            _localizer = localizer;
            _file = file;
        }}

        public async Task<Result<Guid>> Create{_model.Name}Async(Create{_model.Name}Request request)
        {{
            var {_model.Name.ToLower()}Exists = await _repository.ExistsAsync<{_model.Name}>(a => a.{_engine.ExistsField} == request.{_engine.ExistsField});
            if ({_model.Name.ToLower()}Exists) throw new EntityAlreadyExistsException(string.Format(_localizer[""{_model.Name.ToLower()}.alreadyexists""], request.{_engine.ExistsField}));
{_appmodelExistsCode}
            var {_model.Name.ToLower()} = new {_model.Name}({_propertyLine});
            var {_model.Name.ToLower()}Id = await _repository.CreateAsync<{_model.Name}>({_model.Name.ToLower()});
            await _repository.SaveChangesAsync();
            return await Result<Guid>.SuccessAsync({_model.Name.ToLower()}Id);
        }}

        public async Task<Result<Guid>> Update{_model.Name}Async(Update{_model.Name}Request request, Guid id)
        {{
            var {_model.Name.ToLower()} = await _repository.GetByIdAsync<{_model.Name}>(id, null);
            if ({_model.Name.ToLower()} == null) throw new EntityNotFoundException(string.Format(_localizer[""{_model.Name.ToLower()}.notfound""], id));
{_appmodelExistsCode}
            var updated{_model.Name} = {_model.Name.ToLower()}.Update({_propertyLine});
            await _repository.UpdateAsync<{_model.Name}>(updated{_model.Name});
            await _repository.SaveChangesAsync();
            return await Result<Guid>.SuccessAsync(id);
        }}

        public async Task<Result<Guid>> Delete{_model.Name}Async(Guid id)
        {{
            await _repository.RemoveByIdAsync<{_model.Name}>(id);
            await _repository.SaveChangesAsync();
            return await Result<Guid>.SuccessAsync(id);
        }}
{_detailsMethod}
        public async Task<PaginatedResult<{_model.Name}Dto>> Get{_model.Name}sAsync({_model.Name}ListFilter filter)
        {{
            var {_model.Name.ToLower()}s = await _repository.GetPaginatedListAsync<{_model.Name}, {_model.Name}Dto>(filter.PageNumber, filter.PageSize, filter.OrderBy, filter.Search);
            return {_model.Name.ToLower()}s;
        }}

        public async Task<Result<{_model.Name}Dto>> GetByIdUsingDapperAsync(Guid id)
        {{
            var {_model.Name.ToLower()} = await _repository.QueryFirstOrDefaultAsync<{_model.Name}>($""SELECT * FROM public.\""{_model.Name}s\"" WHERE \""Id\""  = '{{id}}' AND \""TenantKey\""='@tenantKey'"");
            var mapped{_model.Name} = {_model.Name.ToLower()}.Adapt<{_model.Name}Dto>();
            return await Result<{_model.Name}Dto>.SuccessAsync(mapped{_model.Name});
        }}
    }}
}}";
            return iCode;
        }

        private string GenerateEagerLoading()
        {
            StringBuilder eagerCode = new StringBuilder();

            foreach (PropertyOption property in _engine.AppModelOptions)
            {
                eagerCode.Append($@"            spec.Includes.Add(a => a.{property.Name});
");
            }

            foreach (PropertyOption property in _engine.AppModelCollectionOptions)
            {
                eagerCode.Append($@"            spec.Includes.Add(a => a.{property.Name});
");
            }

            return eagerCode.ToString().TrimEnd(Environment.NewLine.ToCharArray());
        }

        private string GenerateAppModelExists()
        {
            StringBuilder appModelExists = new StringBuilder();

            foreach(PropertyOption property in _engine.AppModelOptions)
            {
                appModelExists.Append($@"            var {property.Name.ToLower()}Exists = await _repository.ExistsAsync<{property.Name}>(a => a.Id == request.{property.Name}Id);
            if (!{property.Name.ToLower()}Exists) throw new EntityNotFoundException(string.Format(_localizer[""{property.Name.ToLower()}.notfound""], request.{property.Name}Id));
");
            }

            return appModelExists.ToString().TrimEnd(Environment.NewLine.ToCharArray());
        }

        private string GenerateDetailsMethod()
        {
            StringBuilder detailsMethod = new StringBuilder();

            if (_engine.HasAppModel)
            {
                detailsMethod.Append($@"
        public async Task<Result<{_model.Name}DetailsDto>> Get{_model.Name}DetailsAsync(Guid id)
        {{
            var spec = new BaseSpecification<{_model.Name}>();
{_eagerloadingCode}
            var {_model.Name.ToLower()} = await _repository.GetByIdAsync<{_model.Name}, {_model.Name}DetailsDto>(id, spec);
            return await Result<{_model.Name}DetailsDto>.SuccessAsync({_model.Name.ToLower()});
        }}
");
            }

            return detailsMethod.ToString();
        }
    }
}