// Autogenerated by SourceCodeGenerator

using DN.WebApi.Application.Abstractions.Services.CRM;
using DN.WebApi.Domain.Constants;
using DN.WebApi.Infrastructure.Identity.Permissions;
using DN.WebApi.Shared.DTOs.CRM;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Threading.Tasks;

namespace DN.WebApi.Bootstrapper.Controllers.v1
{
    public class NotesController : BaseController
    {
        private readonly INoteService _service;

        public NotesController(INoteService service)
        {
            _service = service;
        }

        [HttpGet("{id}")]
        [MustHavePermission(Permissions.Notes.View)]
        public async Task<IActionResult> GetAsync(Guid id)
        {
            var note = await _service.GetNoteDetailsAsync(id);
            return Ok(note);
        }

        [HttpGet]
        [MustHavePermission(Permissions.Notes.ListAll)]
        public async Task<IActionResult> GetListAsync(NoteListFilter filter)
        {
            var notes = await _service.GetNotesAsync(filter);
            return Ok(notes);
        }

        [HttpGet("dapper")]
        public async Task<IActionResult> GetDapperAsync(Guid id)
        {
            var notes = await _service.GetByIdUsingDapperAsync(id);
            return Ok(notes);
        }

        [HttpPost]
        public async Task<IActionResult> CreateAsync(CreateNoteRequest request)
        {
            return Ok(await _service.CreateNoteAsync(request));
        }

        [HttpPut]
        public async Task<IActionResult> UpdateAsync(UpdateNoteRequest request, Guid id)
        {
            return Ok(await _service.UpdateNoteAsync(request, id));
        }

        [HttpDelete]
        public async Task<IActionResult> DeleteAsync(Guid id)
        {
            var noteId = await _service.DeleteNoteAsync(id);
            return Ok(noteId);
        }
    }
}