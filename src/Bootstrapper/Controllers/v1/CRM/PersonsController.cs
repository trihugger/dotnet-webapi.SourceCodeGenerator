// Autogenerated by SourceCodeGenerator

using DN.WebApi.Application.Abstractions.Services.CRM;
using DN.WebApi.Domain.Constants;
using DN.WebApi.Infrastructure.Identity.Permissions;
using DN.WebApi.Shared.DTOs.CRM;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Threading.Tasks;

namespace DN.WebApi.Bootstrapper.Controllers.v1
{
    public class PersonsController : BaseController
    {
        private readonly IPersonService _service;

        public PersonsController(IPersonService service)
        {
            _service = service;
        }

        [HttpGet("{id}")]
        [MustHavePermission(Permissions.Persons.View)]
        public async Task<IActionResult> GetAsync(Guid id)
        {
            var person = await _service.GetPersonDetailsAsync(id);
            return Ok(person);
        }

        [HttpGet]
        [MustHavePermission(Permissions.Persons.ListAll)]
        public async Task<IActionResult> GetListAsync(PersonListFilter filter)
        {
            var persons = await _service.GetPersonsAsync(filter);
            return Ok(persons);
        }

        [HttpGet("dapper")]
        public async Task<IActionResult> GetDapperAsync(Guid id)
        {
            var persons = await _service.GetByIdUsingDapperAsync(id);
            return Ok(persons);
        }

        [HttpPost]
        public async Task<IActionResult> CreateAsync(CreatePersonRequest request)
        {
            return Ok(await _service.CreatePersonAsync(request));
        }

        [HttpPut]
        public async Task<IActionResult> UpdateAsync(UpdatePersonRequest request, Guid id)
        {
            return Ok(await _service.UpdatePersonAsync(request, id));
        }

        [HttpDelete]
        public async Task<IActionResult> DeleteAsync(Guid id)
        {
            var personId = await _service.DeletePersonAsync(id);
            return Ok(personId);
        }
    }
}