// Autogenerated by SourceCodeGenerator

using DN.WebApi.Application.Abstractions.Repositories;
using DN.WebApi.Application.Abstractions.Services.CRM;
using DN.WebApi.Application.Abstractions.Services.General;
using DN.WebApi.Application.Exceptions;
using DN.WebApi.Application.Specifications;
using DN.WebApi.Application.Wrapper;
using DN.WebApi.Domain.Entities.CRM;
using DN.WebApi.Domain.Enums;
using DN.WebApi.Shared.DTOs.CRM;
using Mapster;
using Microsoft.Extensions.Localization;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace DN.WebApi.Application.Services.CRM
{
    public class PersonService : IPersonService
    {
        private readonly IStringLocalizer<PersonService> _localizer;
        private readonly IFileStorageService _file;
        private readonly IRepositoryAsync _repository;

        public PersonService(IRepositoryAsync repository, IStringLocalizer<PersonService> localizer, IFileStorageService file)
        {
            _repository = repository;
            _localizer = localizer;
            _file = file;
        }

        public async Task<Result<Guid>> CreatePersonAsync(CreatePersonRequest request)
        {
            var personExists = await _repository.ExistsAsync<Person>(a => a.Name == request.Name);
            if (personExists) throw new EntityAlreadyExistsException(string.Format(_localizer["person.alreadyexists"], request.Name));
            var companyExists = await _repository.ExistsAsync<Company>(a => a.Id == request.CompanyId);
            if (!companyExists) throw new EntityNotFoundException(string.Format(_localizer["company.notfound"], request.CompanyId));
            var person = new Person(request.Name, request.Age, request.DateOfBirth, request.CompanyId);
            var personId = await _repository.CreateAsync<Person>(person);
            await _repository.SaveChangesAsync();
            return await Result<Guid>.SuccessAsync(personId);
        }

        public async Task<Result<Guid>> UpdatePersonAsync(UpdatePersonRequest request, Guid id)
        {
            var person = await _repository.GetByIdAsync<Person>(id, null);
            if (person == null) throw new EntityNotFoundException(string.Format(_localizer["person.notfound"], id));
            var companyExists = await _repository.ExistsAsync<Company>(a => a.Id == request.CompanyId);
            if (!companyExists) throw new EntityNotFoundException(string.Format(_localizer["company.notfound"], request.CompanyId));
            var updatedPerson = person.Update(request.Name, request.Age, request.DateOfBirth, request.CompanyId);
            await _repository.UpdateAsync<Person>(updatedPerson);
            await _repository.SaveChangesAsync();
            return await Result<Guid>.SuccessAsync(id);
        }

        public async Task<Result<Guid>> DeletePersonAsync(Guid id)
        {
            await _repository.RemoveByIdAsync<Person>(id);
            await _repository.SaveChangesAsync();
            return await Result<Guid>.SuccessAsync(id);
        }

        public async Task<Result<PersonDetailsDto>> GetPersonDetailsAsync(Guid id)
        {
            var spec = new BaseSpecification<Person>();
            spec.Includes.Add(a => a.Company);
            spec.Includes.Add(a => a.Notes);
            var person = await _repository.GetByIdAsync<Person, PersonDetailsDto>(id, spec);
            return await Result<PersonDetailsDto>.SuccessAsync(person);
        }

        public async Task<PaginatedResult<PersonDto>> GetPersonsAsync(PersonListFilter filter)
        {
            var persons = await _repository.GetPaginatedListAsync<Person, PersonDto>(filter.PageNumber, filter.PageSize, filter.OrderBy, filter.Search);
            return persons;
        }

        public async Task<Result<PersonDto>> GetByIdUsingDapperAsync(Guid id)
        {
            var person = await _repository.QueryFirstOrDefaultAsync<Person>($"SELECT * FROM public.\"Persons\" WHERE \"Id\"  = '{id}' AND \"TenantKey\"='@tenantKey'");
            var mappedPerson = person.Adapt<PersonDto>();
            return await Result<PersonDto>.SuccessAsync(mappedPerson);
        }
    }
}